----- script 
SELECT
    a.table_name AS tabla_referencia,
    a.column_name AS columna_foranea,
    c.constraint_name AS nombre_constraint,
    c_pk.table_name AS tabla_referenciada,
    c_pk.column_name AS columna_primaria
FROM
    all_cons_columns a
JOIN
    all_constraints c ON a.constraint_name = c.constraint_name
JOIN
    all_cons_columns c_pk ON c.r_constraint_name = c_pk.constraint_name
WHERE
    c.constraint_type = 'R'
    AND c_pk.table_name = 'CATEGORIES'
    AND c_pk.column_name = 'CATEGORY_ID'
ORDER BY
    a.table_name;


--1. Creaci�n de Tablas Principales
CREATE TABLE categories (
    category_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    description VARCHAR2(255)
);

--Tabla de Productos (products)

CREATE TABLE products (
    product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    description VARCHAR2(255),
    price NUMBER(10, 2) NOT NULL,
    stock_quantity NUMBER NOT NULL,
    category_id NUMBER,
    CONSTRAINT fk_category FOREIGN KEY (category_id)
    REFERENCES categories(category_id)
);

--Tabla de Clientes (customers)
CREATE TABLE customers (
    customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    email VARCHAR2(100),
    phone_number VARCHAR2(20),
    address VARCHAR2(255)
);

--Tabla de Departamentos (departments)
CREATE TABLE departments (
    department_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL
);

--Tabla de Empleados (employees)

CREATE TABLE employees (
    employee_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    position VARCHAR2(50),
    hire_date DATE,
    salary NUMBER(10, 2),
    department_id NUMBER,
    CONSTRAINT fk_department FOREIGN KEY (department_id)
    REFERENCES departments(department_id)
);

--Tabla de Proveedores (suppliers)
CREATE TABLE suppliers (
    supplier_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    contact_name VARCHAR2(100),
    phone_number VARCHAR2(20),
    email VARCHAR2(100)
);

--2. Creaci�n de Tablas Dependientes
--Tabla de �rdenes (orders)

CREATE TABLE orders (
    order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_date DATE NOT NULL,
    customer_id NUMBER,
    employee_id NUMBER,
    CONSTRAINT fk_customer FOREIGN KEY (customer_id)
    REFERENCES customers(customer_id),
    CONSTRAINT fk_employee FOREIGN KEY (employee_id)
    REFERENCES employees(employee_id)
);

--Tabla de Detalles de la Orden (order_details)
CREATE TABLE order_details (
    order_detail_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id NUMBER,
    product_id NUMBER,
    quantity NUMBER NOT NULL,
    unit_price NUMBER(10, 2) NOT NULL,
    CONSTRAINT fk_order FOREIGN KEY (order_id)
    REFERENCES orders(order_id),
    CONSTRAINT fk_product FOREIGN KEY (product_id)
    REFERENCES products(product_id)
);


--Tabla de Compras a Proveedores (supplier_orders)
CREATE TABLE supplier_orders (
    supplier_order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    supplier_id NUMBER,
    order_date DATE NOT NULL,
    total_amount NUMBER(10, 2),
    CONSTRAINT fk_supplier FOREIGN KEY (supplier_id)
    REFERENCES suppliers(supplier_id)
);
--Tabla de Detalle de Compras a Proveedores (supplier_order_details)

CREATE TABLE supplier_order_details (
    supplier_order_detail_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    supplier_order_id NUMBER,
    product_id NUMBER,
    quantity NUMBER NOT NULL,
    unit_price NUMBER(10, 2) NOT NULL,
    CONSTRAINT fk_supplier_order FOREIGN KEY (supplier_order_id)
    REFERENCES supplier_orders(supplier_order_id),
    CONSTRAINT fk_supplier_product FOREIGN KEY (product_id)
    REFERENCES products(product_id)
);


--Reporte de ventas mensuales:
SELECT TO_CHAR(order_date, 'YYYY-MM') AS month, 
       SUM(unit_price * quantity) AS total_sales 
FROM orders o 
JOIN order_details od ON o.order_id = od.order_id 
GROUP BY TO_CHAR(order_date, 'YYYY-MM');


--1. Creaci�n de Roles
--Rol de Administrador
--Este rol tendr� permisos completos para realizar todas las operaciones de gesti�n, incluyendo la administraci�n de productos, categor�as, clientes, empleados, �rdenes, y proveedores.


-- Crear el rol de administrador
CREATE ROLE rol_admin;

-- Otorgar permisos al rol de administrador
GRANT CREATE SESSION TO rol_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON products TO rol_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON categories TO rol_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON customers TO rol_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON employees TO rol_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON departments TO rol_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON orders TO rol_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON order_details TO rol_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON suppliers TO rol_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON supplier_orders TO rol_admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON supplier_order_details TO rol_admin;


--Rol de Operador
--Este rol tendr� permisos limitados, especialmente para realizar consultas y registrar nuevas �rdenes, pero sin acceso a operaciones de administraci�n como la modificaci�n de productos o categor�as.
-- Crear el rol de operador
CREATE ROLE rol_operador;

-- Otorgar permisos al rol de operador
GRANT CREATE SESSION TO rol_operador;
GRANT SELECT ON products TO rol_operador;
GRANT SELECT ON categories TO rol_operador;
GRANT SELECT, INSERT ON customers TO rol_operador;
GRANT SELECT, INSERT ON orders TO rol_operador;
GRANT SELECT, INSERT ON order_details TO rol_operador;
GRANT SELECT ON employees TO rol_operador;

--2. Asignaci�n de Roles a Usuarios
--Con estos roles creados, puedes asign�rselos a diferentes usuarios para que tengan acceso seg�n sus funciones. Por ejemplo:

-- Crear usuario de administrador y asignarle rol
CREATE USER admin_user IDENTIFIED BY admin_password;
GRANT rol_admin TO admin_user;

-- Crear usuario de operador y asignarle rol
CREATE USER operador_user IDENTIFIED BY operador_password;
GRANT rol_operador TO operador_user;


-- Revocar un permiso espec�fico
REVOKE DELETE ON products FROM rol_operador;

-- Otorgar un nuevo permiso espec�fico
GRANT UPDATE ON customers TO rol_operador;
--Este esquema permite administrar de forma flexible los permisos de los usuarios y cumplir con los requerimientos de seguridad y control del sistema del supermercado.


-- Crear un Disparador para la Inserci�n Autom�tica del SUPPLIER_ID
--Para asegurarte de que el SUPPLIER_ID se llene autom�ticamente con el siguiente valor de la secuencia cada vez que insertes un nuevo registro, crea un disparador (trigger) que se active antes de cada inserci�n:
CREATE OR REPLACE TRIGGER suppliers_id_trigger
BEFORE INSERT ON suppliers
FOR EACH ROW
BEGIN
  IF :NEW.SUPPLIER_ID IS NULL THEN
    :NEW.SUPPLIER_ID := suppliers_seq.NEXTVAL;
  END IF;
END;

-- FUNCIONES 

--1. Obtener el precio total de un producto por cantidad

CREATE OR REPLACE FUNCTION get_total_price(
    p_product_id IN INT,
    p_quantity IN INT
) RETURN DECIMAL IS
    v_price DECIMAL(10, 2);
BEGIN
    SELECT price INTO v_price FROM products WHERE product_id = p_product_id;
    RETURN v_price * p_quantity;
END;

--2. Calcular el stock restante después de una venta

CREATE OR REPLACE FUNCTION calculate_stock_after_sale(
    p_product_id IN INT,
    p_quantity_sold IN INT
) RETURN INT IS
    v_stock INT;
BEGIN
    SELECT stock_quantity INTO v_stock FROM products WHERE product_id = p_product_id;
    RETURN v_stock - p_quantity_sold;
END;



--3. Obtener el nombre del proveedor de un producto

CREATE OR REPLACE FUNCTION get_supplier_name(
    p_product_id IN INT
) RETURN VARCHAR IS
    v_supplier_name VARCHAR(255);
BEGIN
    SELECT s.name
    INTO v_supplier_name
    FROM suppliers s
    JOIN supplier_products sp ON s.supplier_id = sp.supplier_id
    WHERE sp.product_id = p_product_id;
    RETURN v_supplier_name;
END;



--4. Calcular el total de una orden

CREATE OR REPLACE FUNCTION calculate_order_total(
    p_order_id IN INT
) RETURN DECIMAL IS
    v_total DECIMAL(10, 2);
BEGIN
    SELECT SUM(quantity * unit_price)
    INTO v_total
    FROM order_details
    WHERE order_id = p_order_id;
    RETURN v_total;
END;

--5. Determinar si un producto está en stock

CREATE OR REPLACE FUNCTION is_product_in_stock(
    p_product_id IN INT
) RETURN VARCHAR IS
    v_stock INT;
BEGIN
    SELECT stock_quantity INTO v_stock FROM products WHERE product_id = p_product_id;
    RETURN CASE WHEN v_stock > 0 THEN 'Yes' ELSE 'No' END;
END;

--6. Obtener el descuento aplicable para un producto

CREATE OR REPLACE FUNCTION get_discount(
    p_product_id IN INT
) RETURN DECIMAL IS
    v_discount DECIMAL(10, 2);
BEGIN
    -- Supongamos que el descuento se define en una tabla llamada discounts
    SELECT COALESCE(discount_percentage, 0)
    INTO v_discount
    FROM discounts
    WHERE product_id = p_product_id;
    RETURN v_discount;
END;

--7. Contar productos en una categoría específica

CREATE OR REPLACE FUNCTION count_products_by_category(
    p_category_id IN INT
) RETURN INT IS
    v_count INT;
BEGIN
    SELECT COUNT(*) INTO v_count FROM products WHERE category_id = p_category_id;
    RETURN v_count;
END;

--8. Obtener la fecha del último pedido de un cliente

CREATE OR REPLACE FUNCTION get_last_order_date(
    p_customer_id IN INT
) RETURN DATE IS
    v_last_date DATE;
BEGIN
    SELECT MAX(order_date) INTO v_last_date FROM orders WHERE customer_id = p_customer_id;
    RETURN v_last_date;
END;

--9. Calcular el total de ventas de un empleado

CREATE OR REPLACE FUNCTION calculate_employee_sales(
    p_employee_id IN INT
) RETURN DECIMAL IS
    v_sales_total DECIMAL(10, 2);
BEGIN
    SELECT SUM(o.total_amount)
    INTO v_sales_total
    FROM orders o
    WHERE o.employee_id = p_employee_id;
    RETURN v_sales_total;
END;

--10. Obtener la cantidad de pedidos de un cliente

CREATE OR REPLACE FUNCTION count_orders_by_customer(
    p_customer_id IN INT
) RETURN INT IS
    v_order_count INT;
BEGIN
    SELECT COUNT(*) INTO v_order_count FROM orders WHERE customer_id = p_customer_id;
    RETURN v_order_count;
END;

--11. Calcular el total gastado por un cliente

CREATE OR REPLACE FUNCTION calculate_customer_total_spent(
    p_customer_id IN INT
) RETURN DECIMAL IS
    v_total_spent DECIMAL(10, 2);
BEGIN
    SELECT SUM(o.total_amount)
    INTO v_total_spent
    FROM orders o
    WHERE o.customer_id = p_customer_id;
    RETURN v_total_spent;
END;

--12. Obtener el nombre completo de un cliente

CREATE OR REPLACE FUNCTION get_customer_name(
    p_customer_id IN INT
) RETURN VARCHAR IS
    v_name VARCHAR(255);
BEGIN
    SELECT CONCAT(first_name, ' ', last_name)
    INTO v_name
    FROM customers
    WHERE customer_id = p_customer_id;
    RETURN v_name;
END;

--13. Calcular el promedio de precio de los productos en una categoría

CREATE OR REPLACE FUNCTION calculate_avg_price_by_category(
    p_category_id IN INT
) RETURN DECIMAL IS
    v_avg_price DECIMAL(10, 2);
BEGIN
    SELECT AVG(price)
    INTO v_avg_price
    FROM products
    WHERE category_id = p_category_id;
    RETURN v_avg_price;
END;

--14. Obtener el producto con mayor stock

CREATE OR REPLACE FUNCTION get_product_with_highest_stock RETURN VARCHAR IS
    v_product_name VARCHAR(255);
BEGIN
    SELECT name
    INTO v_product_name
    FROM products
    WHERE stock_quantity = (SELECT MAX(stock_quantity) FROM products);
    RETURN v_product_name;
END;

--15. Calcular el total de órdenes de un proveedor específico

CREATE OR REPLACE FUNCTION calculate_supplier_orders_total(
    p_supplier_id IN INT
) RETURN DECIMAL IS
    v_total DECIMAL(10, 2);
BEGIN
    SELECT SUM(total_amount)
    INTO v_total
    FROM supplier_orders
    WHERE supplier_id = p_supplier_id;
    RETURN v_total;
END;
/


--16. Obtener la cantidad de productos suministrados por un proveedor

CREATE OR REPLACE FUNCTION count_products_by_supplier(
    p_supplier_id IN INT
) RETURN INT IS
    v_count INT;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM supplier_products
    WHERE supplier_id = p_supplier_id;
    RETURN v_count;
END;



--17. Obtener la fecha del primer pedido de un cliente

CREATE OR REPLACE FUNCTION get_first_order_date(
    p_customer_id IN INT
) RETURN DATE IS
    v_first_date DATE;
BEGIN
    SELECT MIN(order_date)
    INTO v_first_date
    FROM orders
    WHERE customer_id = p_customer_id;
    RETURN v_first_date;
END;
/


--18. Calcular el total de stock en el inventario

CREATE OR REPLACE FUNCTION calculate_total_stock RETURN INT IS
    v_total_stock INT;
BEGIN
    SELECT SUM(stock_quantity)
    INTO v_total_stock
    FROM products;
    RETURN v_total_stock;
END;

--19. Obtener el nombre de la categoría de un producto

CREATE OR REPLACE FUNCTION get_category_name(
    p_product_id IN INT
) RETURN VARCHAR IS
    v_category_name VARCHAR(255);
BEGIN
    SELECT c.name
    INTO v_category_name
    FROM categories c
    JOIN products p ON c.category_id = p.category_id
    WHERE p.product_id = p_product_id;
    RETURN v_category_name;
END;

--20. Calcular el precio total de un pedido a proveedores

CREATE OR REPLACE FUNCTION calculate_supplier_order_total(
    p_supplier_order_id IN INT
) RETURN DECIMAL IS
    v_total DECIMAL(10, 2);
BEGIN
    SELECT SUM(quantity * unit_price)
    INTO v_total
    FROM supplier_order_details
    WHERE supplier_order_id = p_supplier_order_id;
    RETURN v_total;
END;

--21. Determinar si un cliente es frecuente (más de 5 pedidos)

CREATE OR REPLACE FUNCTION is_frequent_customer(
    p_customer_id IN INT
) RETURN VARCHAR IS
    v_order_count INT;
BEGIN
    SELECT COUNT(*)
    INTO v_order_count
    FROM orders
    WHERE customer_id = p_customer_id;
    RETURN CASE WHEN v_order_count > 5 THEN 'Yes' ELSE 'No' END;
END;

--22. Obtener el producto más caro de una categoría

CREATE OR REPLACE FUNCTION get_most_expensive_product_in_category(
    p_category_id IN INT
) RETURN VARCHAR IS
    v_product_name VARCHAR(255);
BEGIN
    SELECT name
    INTO v_product_name
    FROM products
    WHERE category_id = p_category_id
    AND price = (SELECT MAX(price) FROM products WHERE category_id = p_category_id);
    RETURN v_product_name;
END;

--23. Calcular el monto total de ventas en un período

CREATE OR REPLACE FUNCTION calculate_sales_in_period(
    p_start_date IN DATE,
    p_end_date IN DATE
) RETURN DECIMAL IS
    v_sales_total DECIMAL(10, 2);
BEGIN
    SELECT SUM(total_amount)
    INTO v_sales_total
    FROM orders
    WHERE order_date BETWEEN p_start_date AND p_end_date;
    RETURN v_sales_total;
END;

--24. Obtener la cantidad de productos con bajo stock

CREATE OR REPLACE FUNCTION count_low_stock_products(
    p_min_stock IN INT
) RETURN INT IS
    v_count INT;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM products
    WHERE stock_quantity < p_min_stock;
    RETURN v_count;
END;

--25. Obtener el proveedor más frecuente de pedidos

CREATE OR REPLACE FUNCTION get_most_frequent_supplier RETURN VARCHAR IS
    v_supplier_name VARCHAR(255);
BEGIN
    SELECT s.name
    INTO v_supplier_name
    FROM suppliers s
    JOIN supplier_orders so ON s.supplier_id = so.supplier_id
    GROUP BY s.name
    ORDER BY COUNT(so.supplier_order_id) DESC
    FETCH FIRST 1 ROWS ONLY;
    RETURN v_supplier_name;
END;
--------------------------------------------------------------------------------
---- Vistas 

---1 Vista de productos con sus categorías
CREATE OR REPLACE VIEW view_products_with_categories AS
SELECT 
    p.product_id,
    p.name AS product_name,
    p.description AS product_description,
    p.price,
    p.stock_quantity,
    c.name AS category_name,
    c.description AS category_description
FROM 
    products p
LEFT JOIN 
    categories c ON p.category_id = c.category_id;
    
----2 Vista de órdenes con detalles de cliente 
CREATE OR REPLACE VIEW view_orders_with_customers AS
SELECT 
    o.order_id,
    o.order_date,
    c.first_name || ' ' || c.last_name AS customer_name,
    c.email,
    c.phone_number
FROM 
    orders o
LEFT JOIN 
    customers c ON o.customer_id = c.customer_id;
    
------3 Vista de empleados y sus departamentos

CREATE OR REPLACE VIEW view_employees_with_departments AS
SELECT 
    e.employee_id,
    e.first_name || ' ' || e.last_name AS employee_name,
    e.position,
    e.hire_date,
    e.salary,
    d.name AS department_name
FROM 
    employees e
LEFT JOIN 
    departments d ON e.department_id = d.department_id;

-----4 Vista de ventas totales por producto
CREATE OR REPLACE VIEW view_sales_by_product AS
SELECT 
    p.name AS product_name,
    SUM(od.quantity * od.unit_price) AS total_sales
FROM 
    order_details od
JOIN 
    products p ON od.product_id = p.product_id
GROUP BY 
    p.name;

------5 Vista de órdenes realizadas por cada cliente
CREATE OR REPLACE VIEW view_orders_per_customer AS
SELECT 
    c.first_name || ' ' || c.last_name AS customer_name,
    COUNT(o.order_id) AS total_orders,
    SUM(od.quantity * od.unit_price) AS total_spent
FROM 
    customers c
LEFT JOIN 
    orders o ON c.customer_id = o.customer_id
LEFT JOIN 
    order_details od ON o.order_id = od.order_id
GROUP BY 
    c.first_name, c.last_name;
    
------6 Vista de proveedores y productos suministrados
CREATE OR REPLACE VIEW view_suppliers_with_products AS
SELECT 
    s.name AS supplier_name,
    s.contact_name,
    s.phone_number,
    p.name AS product_name,
    SUM(sod.quantity) AS total_quantity_supplied
FROM 
    suppliers s
LEFT JOIN 
    supplier_orders so ON s.supplier_id = so.supplier_id
LEFT JOIN 
    supplier_order_details sod ON so.supplier_order_id = sod.supplier_order_id
LEFT JOIN 
    products p ON sod.product_id = p.product_id
GROUP BY 
    s.name, s.contact_name, s.phone_number, p.name;

-----7 Vista de inventario por categoría
CREATE OR REPLACE VIEW view_inventory_by_category AS
SELECT 
    c.name AS category_name,
    COUNT(p.product_id) AS total_products,
    SUM(p.stock_quantity) AS total_stock
FROM 
    categories c
LEFT JOIN 
    products p ON c.category_id = p.category_id
GROUP BY 
    c.name;

----8 Vista de ventas por empleado
CREATE OR REPLACE VIEW view_sales_by_employee AS
SELECT 
    e.first_name || ' ' || e.last_name AS employee_name,
    COUNT(o.order_id) AS total_orders_handled,
    SUM(od.quantity * od.unit_price) AS total_sales_generated
FROM 
    employees e
LEFT JOIN 
    orders o ON e.employee_id = o.employee_id
LEFT JOIN 
    order_details od ON o.order_id = od.order_id
GROUP BY 
    e.first_name, e.last_name;

----9 Vista de compras a proveedores
CREATE OR REPLACE VIEW view_purchases_from_suppliers AS
SELECT 
    s.name AS supplier_name,
    so.order_date,
    SUM(sod.quantity * sod.unit_price) AS total_purchase
FROM 
    suppliers s
LEFT JOIN 
    supplier_orders so ON s.supplier_id = so.supplier_id
LEFT JOIN 
    supplier_order_details sod ON so.supplier_order_id = sod.supplier_order_id
GROUP BY 
    s.name, so.order_date;

---10 Vista de detalles de órdenes completas
CREATE OR REPLACE VIEW view_order_details_complete AS
SELECT 
    o.order_id,
    o.order_date,
    c.first_name || ' ' || c.last_name AS customer_name,
    e.first_name || ' ' || e.last_name AS employee_name,
    p.name AS product_name,
    od.quantity,
    od.unit_price,
    (od.quantity * od.unit_price) AS total_price
FROM 
    orders o
LEFT JOIN 
    customers c ON o.customer_id = c.customer_id
LEFT JOIN 
    employees e ON o.employee_id = e.employee_id
LEFT JOIN 
    order_details od ON o.order_id = od.order_id
LEFT JOIN 
    products p ON od.product_id = p.product_id;

SELECT * FROM view_products_with_categories;
--------------------------------------------------------------------------------
---------- Procedimientos

---1 nueva orden con detalles
CREATE OR REPLACE PROCEDURE add_order_with_details(
    p_customer_id IN NUMBER,
    p_employee_id IN NUMBER,
    p_order_date IN DATE,
    p_products IN SYS.ODCINUMBERLIST, -- Lista de IDs de productos
    p_quantities IN SYS.ODCINUMBERLIST, -- Lista de cantidades
    p_unit_prices IN SYS.ODCINUMBERLIST -- Lista de precios unitarios
) AS
    v_order_id NUMBER;
BEGIN
    -- Insertar la orden en la tabla orders
    INSERT INTO orders (order_date, customer_id, employee_id)
    VALUES (p_order_date, p_customer_id, p_employee_id)
    RETURNING order_id INTO v_order_id;

    -- Insertar los detalles de la orden
    FOR i IN 1 .. p_products.COUNT LOOP
        INSERT INTO order_details (order_id, product_id, quantity, unit_price)
        VALUES (v_order_id, p_products(i), p_quantities(i), p_unit_prices(i));
    END LOOP;

    -- Confirmar la transacción
    COMMIT;
END;
/
select *from order_details
DECLARE
    products SYS.ODCINUMBERLIST := SYS.ODCINUMBERLIST(1, 2, 3);
    quantities SYS.ODCINUMBERLIST := SYS.ODCINUMBERLIST(10, 5, 2);
    prices SYS.ODCINUMBERLIST := SYS.ODCINUMBERLIST(100.50, 200.75, 150.00);
BEGIN
    add_order_with_details(1, 2, SYSDATE, products, quantities, prices);
END;
/

--------2 stock de productos 

CREATE OR REPLACE PROCEDURE update_product_stock(
    p_product_id IN NUMBER,
    p_quantity IN NUMBER
) AS
BEGIN
    UPDATE products
    SET stock_quantity = stock_quantity + p_quantity
    WHERE product_id = p_product_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El producto con ID ' || p_product_id || ' no existe.');
    END IF;

    COMMIT;
END;
/
select * from products;
BEGIN
   update_product_stock(1, -5); -- Reduce el stock en 5 unidades
END;

----test
-BEGIN
   update_product_stock(999, 10); -- Producto inexistente
END;


----3 Procedimiento para agregar un nuevo cliente
CREATE OR REPLACE PROCEDURE add_customer(
    p_first_name IN VARCHAR2,
    p_last_name IN VARCHAR2,
    p_email IN VARCHAR2,
    p_phone_number IN VARCHAR2,
    p_address IN VARCHAR2
) AS
BEGIN
    INSERT INTO customers (first_name, last_name, email, phone_number, address)
    VALUES (p_first_name, p_last_name, p_email, p_phone_number, p_address);

    COMMIT;
END;
/
BEGIN
    add_customer('Joy', 'Doke', 'johnd@example.com', '123456712', '12663 Main St');
END;
/
select * from customers;

----4 Procedimiento para eliminar un producto

CREATE OR REPLACE PROCEDURE delete_product(
    p_product_id IN NUMBER
) AS
BEGIN
    DELETE FROM order_details
    WHERE product_id = p_product_id;

    DELETE FROM supplier_order_details
    WHERE product_id = p_product_id;

    DELETE FROM products
    WHERE product_id = p_product_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'El producto con ID ' || p_product_id || ' no existe.');
    END IF;

    COMMIT;
END;

BEGIN
    delete_product(20); -- Elimina el producto con ID 1
END;

select * from products;

------5 actualizar precio producto

CREATE OR REPLACE PROCEDURE update_product_price(
    p_product_id IN NUMBER,
    p_new_price IN NUMBER
) AS
BEGIN
    UPDATE products
    SET price = p_new_price
    WHERE product_id = p_product_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'El producto con ID ' || p_product_id || ' no existe.');
    END IF;

    COMMIT;
END;

BEGIN
    update_product_price(19, 199.99); --
END;

select * from products;

----6 registrar nuevo empleado
CREATE OR REPLACE PROCEDURE add_employee(
    p_first_name IN VARCHAR2,
    p_last_name IN VARCHAR2,
    p_position IN VARCHAR2,
    p_hire_date IN DATE,
    p_salary IN NUMBER,
    p_department_id IN NUMBER
) AS
BEGIN
    INSERT INTO employees (first_name, last_name, position, hire_date, salary, department_id)
    VALUES (p_first_name, p_last_name, p_position, p_hire_date, p_salary, p_department_id);

    COMMIT;
END;

BEGIN
    add_employee('Jeni', 'aRCE', 'Manager', SYSDATE, 75000, 1);
END;

select * from employees;

----7 obtener información básica de un cliente
CREATE OR REPLACE PROCEDURE get_customer_info(
    p_customer_id IN NUMBER,
    p_customer_name OUT VARCHAR2,
    p_email OUT VARCHAR2,
    p_phone_number OUT VARCHAR2
) AS
BEGIN
    SELECT first_name || ' ' || last_name, email, phone_number
    INTO p_customer_name, p_email, p_phone_number
    FROM customers
    WHERE customer_id = p_customer_id;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20004, 'El cliente con ID ' || p_customer_id || ' no existe.');
END;

DECLARE
    customer_name VARCHAR2(100);
    email VARCHAR2(100);
    phone_number VARCHAR2(20);
BEGIN
    get_customer_info(1, customer_name, email, phone_number);
    DBMS_OUTPUT.PUT_LINE('Nombre: ' || customer_name || ', Email: ' || email || ', Teléfono: ' || phone_number);
END;

--- OUPUT

---8 registrar compra vvendedor
CREATE OR REPLACE PROCEDURE add_supplier_order(
    p_supplier_id IN NUMBER,
    p_order_date IN DATE,
    p_total_amount IN NUMBER
) AS
BEGIN
    INSERT INTO supplier_orders (supplier_id, order_date, total_amount)
    VALUES (p_supplier_id, p_order_date, p_total_amount);

    COMMIT;
END;

BEGIN
    add_supplier_order(1, SYSDATE, 5000);
END;

select *from supplier_orders;

----9 insertar producto

CREATE OR REPLACE PROCEDURE add_product(
    p_name IN VARCHAR2,
    p_description IN VARCHAR2,
    p_price IN NUMBER,
    p_stock_quantity IN NUMBER,
    p_category_id IN NUMBER
) AS
BEGIN
    INSERT INTO products (name, description, price, stock_quantity, category_id)
    VALUES (p_name, p_description, p_price, p_stock_quantity, p_category_id);

    COMMIT;
END;

BEGIN
    add_product('Laptop', 'High-end gaming laptop', 1500, 20, 1);
    add_product('Mouse', 'Wireless mouse', 25, 100, 2);
END;

select *from products;

---10  órdenes de un cliente y las muestra en la consola.
CREATE OR REPLACE PROCEDURE get_customer_orders(
    p_customer_id IN NUMBER
) AS
BEGIN
    FOR order_rec IN (
        SELECT order_id, order_date
        FROM orders
        WHERE customer_id = p_customer_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Order ID: ' || order_rec.order_id || ', Date: ' || order_rec.order_date);
    END LOOP;
END;

SET SERVEROUTPUT ON;
BEGIN
    get_customer_orders(1);
END;

---11 actualizar categoria descr
CREATE OR REPLACE PROCEDURE update_category_description(
    p_category_id IN NUMBER,
    p_new_description IN VARCHAR2
) AS
BEGIN
    UPDATE categories
    SET description = p_new_description
    WHERE category_id = p_category_id;

    COMMIT;
END;

BEGIN
    update_category_description(1, 'prueba de actualizar');
END;
select *from categories;

----12 anadir orden 
CREATE OR REPLACE PROCEDURE add_order(
    p_order_date IN DATE,
    p_customer_id IN NUMBER,
    p_employee_id IN NUMBER
) AS
BEGIN
    INSERT INTO orders (order_date, customer_id, employee_id)
    VALUES (p_order_date, p_customer_id, p_employee_id);

    COMMIT;
END;

BEGIN
    add_order(SYSDATE, 6, 7);
END;
select *from orders;
select *from customers
select *from employees

-----13 productos con stock bajo x
CREATE OR REPLACE PROCEDURE get_products_below_stock(
    p_stock_limit IN NUMBER
) AS
BEGIN
    FOR product_rec IN (
        SELECT name, stock_quantity
        FROM products
        WHERE stock_quantity < p_stock_limit
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Product: ' || product_rec.name || ', Stock: ' || product_rec.stock_quantity);
    END LOOP;
END;
/

SET SERVEROUTPUT ON;
BEGIN
    get_products_below_stock(20);
END;

select *from products

-----14
CREATE OR REPLACE PROCEDURE update_supplier_contact(
    p_supplier_id IN NUMBER,
    p_contact_name IN VARCHAR2,
    p_phone_number IN VARCHAR2
) AS
BEGIN
    UPDATE suppliers
    SET contact_name = p_contact_name,
        phone_number = p_phone_number
    WHERE supplier_id = p_supplier_id;

    COMMIT;
END;

BEGIN
    update_supplier_contact(1, 'Carlos Pérez', '12345670');
END;
 
select *from suppliers

----15 productos mas vendidos 
CREATE OR REPLACE PROCEDURE get_top_selling_products(
    p_top_n IN NUMBER
) AS
BEGIN
    FOR product_rec IN (
        SELECT p.name, SUM(od.quantity) AS total_sold
        FROM products p
        JOIN order_details od ON p.product_id = od.product_id
        GROUP BY p.name
        ORDER BY total_sold DESC
        FETCH FIRST p_top_n ROWS ONLY
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Product: ' || product_rec.name || ', Total Sold: ' || product_rec.total_sold);
    END LOOP;
END;
SET SERVEROUTPUT ON;
BEGIN
    get_top_selling_products(3);
END;

select *from products
select *from ORDER_DETAILS

os procedimientos 2,3,4,5 y 6 llevan un proceso de output los demas no ya que no regresan datos necesariamente, pero podemos incluirlo si se necesita mostrar un proceso de exito y asi

    1-) Actualizar el stock de un producto:

    
CREATE OR REPLACE PROCEDURE update_product_stock(
    p_product_id IN NUMBER,
  
    p_quantity IN NUMBER
)
AS
BEGIN
    UPDATE products
    SET stock_quantity = stock_quantity + p_quantity
    WHERE product_id = p_product_id;
    
    COMMIT;
END;

    

  2-)  Crear una nueva orden:

    
CREATE OR REPLACE PROCEDURE create_new_order(
    p_customer_id IN NUMBER,
    p_employee_id IN NUMBER,
    p_order_id OUT NUMBER
)
AS
BEGIN
    INSERT INTO orders (customer_id, employee_id, order_date, status)
    VALUES (p_customer_id, p_employee_id, SYSDATE, 'Pending')
    RETURNING order_id INTO p_order_id;
    
    COMMIT;
END;

    

  3-)  Agregar un producto a una orden:

    
CREATE OR REPLACE PROCEDURE add_product_to_order(
    p_order_id IN NUMBER,
    p_product_id IN NUMBER,
    p_quantity IN NUMBER
)
AS
    v_unit_price NUMBER;
BEGIN
    SELECT price INTO v_unit_price
       FROM products
    WHERE product_id = p_product_id;

    INSERT INTO order_details (order_id, product_id, quantity, unit_price)
    VALUES (p_order_id, p_product_id, p_quantity, v_unit_price);
    
    COMMIT;
END;

    

  4-)  Calcular el total de una orden:

    
CREATE OR REPLACE PROCEDURE calculate_order_total(
    p_order_id IN NUMBER,
    p_total OUT NUMBER
)
AS
BEGIN
    SELECT SUM(quantity * unit_price)
    INTO p_total
    FROM order_details
    WHERE order_id = p_order_id;
END;

    

  5-)  Actualizar el estado de una orden:

    
CREATE OR REPLACE PROCEDURE update_order_status(
    p_order_id IN NUMBER,
    p_status IN VARCHAR2
)
AS
BEGIN
    UPDATE orders
    SET status = p_status
    WHERE order_id = p_order_id;
    
    COMMIT;
END;

    

   6-) Obtener productos con bajo stock:

    
CREATE OR REPLACE PROCEDURE get_low_stock_products(
    p_threshold IN NUMBER,
    p_result OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_result FOR
    SELECT product_id, name, stock_quantity
    FROM products
    WHERE stock_quantity < p_threshold;
END;

    

   7-) Registrar un nuevo empleado:

    
CREATE OR REPLACE PROCEDURE add_new_employee(
    p_first_name IN VARCHAR2,
    p_last_name IN VARCHAR2,
    p_position IN VARCHAR2,
    p_salary IN NUMBER,
    p_department_id IN NUMBER
)
AS
BEGIN
    INSERT INTO employees (first_name, last_name, position, hire_date, salary, department_id)
    VALUES (p_first_name, p_last_name, p_position, SYSDATE, p_salary, p_department_id);
    
    COMMIT;
END;

    

   8-) Actualizar la información de un cliente:

    
CREATE OR REPLACE PROCEDURE update_customer_info(
    p_customer_id IN NUMBER,
    p_email IN VARCHAR2,
    p_phone_number IN VARCHAR2,
    p_address IN VARCHAR2
)
AS
BEGIN
    UPDATE customers
    SET email = p_email,
        phone_number = p_phone_number,
        address = p_address
    WHERE customer_id = p_customer_id;
    
    COMMIT;
END;

    

   9-) Obtener las ventas totales por categoría:

    
CREATE OR REPLACE PROCEDURE get_sales_by_category(
    p_start_date IN DATE,
    p_end_date IN DATE,
    p_result OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_result FOR
    SELECT c.name AS category_name, SUM(od.quantity * od.unit_price) AS total_sales
    FROM categories c
    JOIN products p ON c.category_id = p.category_id
    JOIN order_details od ON p.product_id = od.product_id
    JOIN orders o ON od.order_id = o.order_id
    WHERE o.order_date BETWEEN p_start_date AND p_end_date
    GROUP BY c.name
    ORDER BY total_sales DESC;
END;

    

   10-) Registrar una nueva compra a proveedor:

    
CREATE OR REPLACE PROCEDURE create_supplier_order(
    p_supplier_id IN NUMBER,
    p_total_amount IN NUMBER,
    p_order_id OUT NUMBER
)
AS
BEGIN
    INSERT INTO supplier_orders (supplier_id, order_date, total_amount)
    VALUES (p_supplier_id, SYSDATE, p_total_amount)
    RETURNING supplier_order_id INTO p_order_id;
    
    COMMIT;
END;

---------------------
------- Paquetes

1.  Gestión de Inventario
CREATE OR REPLACE PACKAGE inventory_management AS
    PROCEDURE update_stock(p_product_id IN NUMBER, p_quantity IN NUMBER);
    FUNCTION get_low_stock_products(p_threshold IN NUMBER) RETURN SYS_REFCURSOR;
END inventory_management;

 2.  Gestión de Pedidos
CREATE OR REPLACE PACKAGE order_management AS
    PROCEDURE create_order(p_customer_id IN NUMBER, p_employee_id IN NUMBER, p_order_date IN DATE, p_order_id OUT NUMBER);
    FUNCTION get_order_total(p_order_id IN NUMBER) RETURN NUMBER;
END order_management;

 3.  Gestión de Clientes
CREATE OR REPLACE PACKAGE customer_management AS
    PROCEDURE add_customer(p_first_name IN VARCHAR2, p_last_name IN VARCHAR2, p_email IN VARCHAR2, p_phone IN VARCHAR2, p_address IN VARCHAR2);
    FUNCTION get_customer_orders(p_customer_id IN NUMBER) RETURN SYS_REFCURSOR;
END customer_management;

 4. Gestión de Empleados
CREATE OR REPLACE PACKAGE employee_management AS
    PROCEDURE update_salary(p_employee_id IN NUMBER, p_new_salary IN NUMBER);
    FUNCTION get_top_performing_employees(p_limit IN NUMBER) RETURN SYS_REFCURSOR;
END employee_management;

 5.  Gestión de Proveedores
CREATE OR REPLACE PACKAGE supplier_management AS
    PROCEDURE add_supplier(p_name IN VARCHAR2, p_contact_name IN VARCHAR2, p_phone IN VARCHAR2, p_email IN VARCHAR2);
    FUNCTION get_supplier_products(p_supplier_id IN NUMBER) RETURN SYS_REFCURSOR;
END supplier_management;

 6. Informes de Ventas
CREATE OR REPLACE PACKAGE sales_reports AS
    FUNCTION get_daily_sales_report(p_date IN DATE) RETURN SYS_REFCURSOR;
    FUNCTION get_monthly_sales_report(p_month IN NUMBER, p_year IN NUMBER) RETURN SYS_REFCURSOR;
END sales_reports;

 7.  Gestión de Categorías
CREATE OR REPLACE PACKAGE category_management AS
    PROCEDURE add_category(p_name IN VARCHAR2, p_description IN VARCHAR2);
    FUNCTION get_category_products(p_category_id IN NUMBER) RETURN SYS_REFCURSOR;
END category_management;

8. Gestión de Precios
CREATE OR REPLACE PACKAGE price_management AS
    PROCEDURE update_product_price(p_product_id IN NUMBER, p_new_price IN NUMBER);
    PROCEDURE apply_discount(p_category_id IN NUMBER, p_discount_percentage IN NUMBER);
END price_management;

 9. Gestión de Devoluciones
CREATE OR REPLACE PACKAGE returns_management AS
    PROCEDURE process_return(p_order_id IN NUMBER, p_product_id IN NUMBER, p_quantity IN NUMBER);
    FUNCTION get_returns_report(p_start_date IN DATE, p_end_date IN DATE) RETURN SYS_REFCURSOR;
END returns_management;

 10. Paquete de Análisis de Datos
CREATE OR REPLACE PACKAGE data_analysis AS
    FUNCTION get_best_selling_products(p_limit IN NUMBER) RETURN SYS_REFCURSOR;
    FUNCTION get_customer_buying_patterns(p_customer_id IN NUMBER) RETURN SYS_REFCURSOR;
END data_analysis;

    
--------------------------
-------------- cursor 
-- Cursor 1: Nueva orden con detalles
DECLARE cursor_orders CURSOR FOR
SELECT o.order_id, o.order_date, c.first_name || ' ' || c.last_name AS customer_name, e.first_name || ' ' || e.last_name AS employee_name
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN employees e ON o.employee_id = e.employee_id;

-- Cursor 2: Stock de productos
DECLARE cursor_product_stock CURSOR FOR
SELECT product_id, name, stock_quantity
FROM products;

-- Cursor 3: Agregar un nuevo cliente
DECLARE cursor_new_customers CURSOR FOR
SELECT customer_id, first_name, last_name, email, phone_number, address
FROM customers;

-- Cursor 4: Eliminar un producto
DECLARE cursor_deleted_products CURSOR FOR
SELECT product_id, name
FROM products
WHERE product_id NOT IN (SELECT DISTINCT product_id FROM order_details);

-- Cursor 5: Actualizar precio de producto
DECLARE cursor_product_price CURSOR FOR
SELECT product_id, name, price
FROM products;

-- Cursor 6: Registrar nuevo empleado
DECLARE cursor_employees CURSOR FOR
SELECT employee_id, first_name, last_name, position, hire_date, salary, department_id
FROM employees;

-- Cursor 7: Obtener información básica de un cliente
DECLARE cursor_customer_info CURSOR FOR
SELECT customer_id, first_name || ' ' || last_name AS name, email, phone_number
FROM customers;

-- Cursor 8: Registrar compra de proveedor
DECLARE cursor_supplier_orders CURSOR FOR
SELECT order_id, supplier_id, order_date, total_amount
FROM supplier_orders;

-- Cursor 9: Insertar producto
DECLARE cursor_new_products CURSOR FOR
SELECT product_id, name, description, price, stock_quantity, category_id
FROM products;

-- Cursor 10: Órdenes de un cliente
DECLARE cursor_customer_orders CURSOR FOR
SELECT o.order_id, o.order_date
FROM orders o
WHERE customer_id = :p_customer_id; --definir variable

-- Cursor 11: Actualizar descripción de categoría
DECLARE cursor_category_description CURSOR FOR
SELECT category_id, description
FROM categories;

-- Cursor 12: Añadir orden
DECLARE cursor_add_orders CURSOR FOR
SELECT order_id, order_date, customer_id, employee_id
FROM orders;

-- Cursor 13: Productos con bajo stock
DECLARE cursor_below_stock CURSOR FOR
SELECT product_id, name, stock_quantity
FROM products
WHERE stock_quantity < :p_stock_limit; --definir variable

-- Cursor 14: Actualizar contacto de proveedor
DECLARE cursor_supplier_contact CURSOR FOR
SELECT supplier_id, contact_name, phone_number
FROM suppliers;

-- Cursor 15: Productos más vendidos
DECLARE cursor_top_selling_products CURSOR FOR
SELECT p.name, SUM(od.quantity) AS total_sold
FROM products p
JOIN order_details od ON p.product_id = od.product_id
GROUP BY p.name
ORDER BY total_sold DESC;

-----------
----------------- triggers

--Triggers

--Trigger 1: Registrar nueva orden
--Se ejecuta después de insertar una orden. Muestra un mensaje con el ID de la orden y el ID del cliente.

CREATE OR REPLACE TRIGGER after_order
AFTER INSERT ON orders
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Nueva orden: ID ' || :NEW.order_id || ' del cliente ID ' || :NEW.customer_id);
END;
/

--Trigger 2: Verificar y ajustar stock después de una orden
--Comprueba si hay suficiente stock para una nueva orden. Si el stock es suficiente, reduce la cantidad; si no, muestra un mensaje indicando que no hay suficiente stock.

CREATE OR REPLACE TRIGGER after_order_check_stock
AFTER INSERT ON orders
FOR EACH ROW
DECLARE
    v_stock_quantity NUMBER;
BEGIN
    -- Verificar el stock disponible del producto
    SELECT stock_quantity INTO v_stock_quantity
    FROM products
    WHERE product_id = :NEW.product_id;

    -- Si el stock es suficiente, reducirlo
    IF v_stock_quantity >= :NEW.quantity THEN
        UPDATE products
        SET stock_quantity = stock_quantity - :NEW.quantity
        WHERE product_id = :NEW.product_id;
    ELSE
        DBMS_OUTPUT.PUT_LINE('Cantidad de producto insuficiente ID ' || :NEW.product_id);
    END IF;
END;
/

--Trigger 3: Actualizar stock si una orden se elimina
--Se ejecuta antes de eliminar una orden. Cuando se elimina una orden, se restaura el stock del producto relacionado a su cantidad original.

CREATE OR REPLACE TRIGGER before_order_delete_restore_stock
BEFORE DELETE ON orders
FOR EACH ROW
BEGIN
    -- Restaurar el stock del producto cuando se elimina la orden
    UPDATE products
    SET stock_quantity = stock_quantity + :OLD.quantity
    WHERE product_id = :OLD.product_id;
END;
/

--Trigger 4: Auditar cambios en la tabla prodcuts
--Audita los cambios en la cantidad de stock de productos. Si el stock cambia, inserta un registro en una tabla de auditoría con el valor anterior y nuevo del stock.

CREATE OR REPLACE TRIGGER after_product_update_audit
AFTER UPDATE ON products
FOR EACH ROW
BEGIN
    IF :OLD.stock_quantity != :NEW.stock_quantity THEN
        INSERT INTO stock_audit (product_id, old_stock_quantity, new_stock_quantity, change_date)
        VALUES (:OLD.product_id, :OLD.stock_quantity, :NEW.stock_quantity, SYSDATE);
    END IF;
END;
/

--Trigger 5: Verificación de stock por debajo del límite
--Verifica que el stock de un producto no caiga por debajo de un valor mínimo (en este caso 5) antes de actualizar la cantidad de stock.

CREATE OR REPLACE TRIGGER check_stock_limit
BEFORE UPDATE ON products
FOR EACH ROW
BEGIN
    IF :NEW.stock_quantity < 5 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Stock no puede estar por debajo de 10 unidades por producto ID ' || :NEW.product_id);
    END IF;
END;
/


